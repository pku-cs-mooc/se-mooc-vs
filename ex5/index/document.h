#ifndef INDEX_DOCUMENT_H_
#define INDEX_DOCUMENT_H_

#include <istream>
#include <string>
#include <utility>

#include "analysis/analyzer.h"
#include "analysis/token_stream.h"

namespace search {

// Document is the base unit for indexing. It mainly contains two parts:
//
// 1. Text Field: on which the inverted index will be built.
// 2. Stored Field: we stores it into document index.
class Document {
 public:
  // Will destruct istream, and if necessary, close file.
  ~Document();

  // Sets the text field by string.
  //
  // set_text should be called once and only once.
  void set_text(const std::string& text);

  // Sets the text field by istream.
  //
  // This class takes the ownship of the istream and will delete it when
  // destructed.
  //
  // set_text should be called once and only once.
  void set_text(std::istream* text);
  std::istream* text() { return text_in_; }

  void set_stored(const std::string& stored) { stored_ = stored; }
  void set_stored(std::string&& stored) { stored_ = std::move(stored); }
  const std::string& stored() const { return stored_; }

  // set_doc_id can only be called once.
  void set_doc_id(int doc_id);
  int doc_id() const { return doc_id_; }

 private:
  // Checks whether we can set_text at this moment.
  //
  // If set_text was called previously, it crashes.
  void check_set_text() const;

  // Creates a TokenStream on the text which is generated by analyzer.
  //
  // The caller will take the ownership of the returned TokenStream. And this
  // document should keep alive before the returned TokenStream is destructed.
  TokenStream* NewTokenStream(const Analyzer& analyzer);

 private:
  std::istream* text_in_ = nullptr;  // OWNED

  // The stored value in this document.
  std::string stored_;

  // -1 means doc_id_ is undefined for this document.
  int doc_id_ = -1;
};

}  // namespace search

#endif  // INDEX_DOCUMENT_H_
